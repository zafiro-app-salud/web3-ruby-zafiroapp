{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// the button to connect to an ethereum wallet\nvar buttonEthConnect = document.querySelector('button.eth_connect'); // the read-only eth address field, we process that automatically\n\nvar formInputEthAddress = document.querySelector('input.eth_address');\nformInputEthAddress.hidden = true; // get the user form for submission later\n\nvar formNewUser = document.querySelector('form.new_user'); // only proceed with ethereum context available\n\nif (typeof window.ethereum !== 'undefined') {\n  buttonEthConnect.addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var accounts, etherbase;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            buttonEthConnect.disabled = true; // request accounts from ethereum provider\n\n            _context.next = 3;\n            return requestAccounts();\n\n          case 3:\n            accounts = _context.sent;\n            etherbase = accounts[0]; // populate and submit form\n\n            formInputEthAddress.value = etherbase;\n            formNewUser.submit();\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n} else {\n  // disable form submission in case there is no ethereum wallet available\n  buttonEthConnect.innerHTML = \"No Ethereum Context Available\";\n  buttonEthConnect.disabled = true;\n} // request ethereum wallet access and approved accounts[]\n\n\nfunction requestAccounts() {\n  return _requestAccounts.apply(this, arguments);\n}\n\nfunction _requestAccounts() {\n  _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var accounts;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return ethereum.request({\n              method: 'eth_requestAccounts'\n            });\n\n          case 2:\n            accounts = _context2.sent;\n            return _context2.abrupt(\"return\", accounts);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _requestAccounts.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/jsagudelo/codigo/blockchain/ethereum-on-rails/app/javascript/packs/users_new.js"],"names":["buttonEthConnect","document","querySelector","formInputEthAddress","hidden","formNewUser","window","ethereum","addEventListener","disabled","requestAccounts","accounts","etherbase","value","submit","innerHTML","request","method"],"mappings":";;;;;;AAAA;AACA,IAAMA,gBAAgB,GAAGC,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,CAAzB,C,CAEA;;AACA,IAAMC,mBAAmB,GAAGF,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,CAA5B;AACAC,mBAAmB,CAACC,MAApB,GAA6B,IAA7B,C,CAEA;;AACA,IAAMC,WAAW,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAApB,C,CAEA;;AACA,IAAI,OAAOI,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1CP,EAAAA,gBAAgB,CAACQ,gBAAjB,CAAkC,OAAlC,wEAA2C;AAAA;AAAA;AAAA;AAAA;AAAA;AACzCR,YAAAA,gBAAgB,CAACS,QAAjB,GAA4B,IAA5B,CADyC,CAGzC;;AAHyC;AAAA,mBAIlBC,eAAe,EAJG;;AAAA;AAInCC,YAAAA,QAJmC;AAKnCC,YAAAA,SALmC,GAKvBD,QAAQ,CAAC,CAAD,CALe,EAOzC;;AACAR,YAAAA,mBAAmB,CAACU,KAApB,GAA4BD,SAA5B;AACAP,YAAAA,WAAW,CAACS,MAAZ;;AATyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3C;AAWD,CAZD,MAYO;AACL;AACAd,EAAAA,gBAAgB,CAACe,SAAjB,GAA6B,+BAA7B;AACAf,EAAAA,gBAAgB,CAACS,QAAjB,GAA4B,IAA5B;AACD,C,CAED;;;SACeC,e;;;;;8EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyBH,QAAQ,CAACS,OAAT,CAAiB;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAAjB,CADzB;;AAAA;AACQN,YAAAA,QADR;AAAA,8CAESA,QAFT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// the button to connect to an ethereum wallet\nconst buttonEthConnect = document.querySelector('button.eth_connect');\n\n// the read-only eth address field, we process that automatically\nconst formInputEthAddress = document.querySelector('input.eth_address');\nformInputEthAddress.hidden = true;\n\n// get the user form for submission later\nconst formNewUser = document.querySelector('form.new_user');\n\n// only proceed with ethereum context available\nif (typeof window.ethereum !== 'undefined') {\n  buttonEthConnect.addEventListener('click', async () => {\n    buttonEthConnect.disabled = true;\n\n    // request accounts from ethereum provider\n    const accounts = await requestAccounts();\n    const etherbase = accounts[0];\n\n    // populate and submit form\n    formInputEthAddress.value = etherbase;\n    formNewUser.submit();\n});\n} else {\n  // disable form submission in case there is no ethereum wallet available\n  buttonEthConnect.innerHTML = \"No Ethereum Context Available\";\n  buttonEthConnect.disabled = true;\n}\n\n// request ethereum wallet access and approved accounts[]\nasync function requestAccounts() {\n  const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n  return accounts;\n}\n"]},"metadata":{},"sourceType":"module"}