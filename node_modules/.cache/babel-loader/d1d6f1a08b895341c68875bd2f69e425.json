{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// the button to connect to an ethereum wallet\nvar buttonEthConnect = document.querySelector('button.eth_connect'); // the read-only eth fields, we process them automatically\n\nvar formInputEthMessage = document.querySelector('input.eth_message');\nvar formInputEthAddress = document.querySelector('input.eth_address');\nvar formInputEthSignature = document.querySelector('input.eth_signature');\nformInputEthMessage.hidden = true;\nformInputEthAddress.hidden = true;\nformInputEthSignature.hidden = true; // get the new session form for submission later\n\nvar formNewSession = document.querySelector('form.new_session'); // only proceed with ethereum context available\n\nif (typeof window.ethereum !== 'undefined') {\n  buttonEthConnect.addEventListener('click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var accounts, etherbase, nonce, customTitle, requestTime, message, signature;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            buttonEthConnect.disabled = true; // request accounts from ethereum provider\n\n            _context.next = 3;\n            return requestAccounts();\n\n          case 3:\n            accounts = _context.sent;\n            etherbase = accounts[0]; // sign a message with current time and nonce from database\n\n            _context.next = 7;\n            return getUuidByAccount(etherbase);\n\n          case 7:\n            nonce = _context.sent;\n\n            if (!nonce) {\n              _context.next = 21;\n              break;\n            }\n\n            customTitle = \"Ethereum on Rails\";\n            requestTime = new Date().getTime();\n            message = customTitle + \",\" + requestTime + \",\" + nonce;\n            _context.next = 14;\n            return personalSign(etherbase, message);\n\n          case 14:\n            signature = _context.sent;\n            // populate and submit form\n            formInputEthMessage.value = message;\n            formInputEthAddress.value = etherbase;\n            formInputEthSignature.value = signature;\n            formNewSession.submit();\n            _context.next = 22;\n            break;\n\n          case 21:\n            // should have some error handling here\n            formInputEthMessage.value = \"Please sign up first!\";\n\n          case 22:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n} else {\n  // disable form submission in case there is no ethereum wallet available\n  buttonEthConnect.innerHTML = \"No Ethereum Context Available\";\n  buttonEthConnect.disabled = true;\n} // request ethereum wallet access and approved accounts[]\n\n\nfunction requestAccounts() {\n  return _requestAccounts.apply(this, arguments);\n} // request ethereum signature for message from account\n\n\nfunction _requestAccounts() {\n  _requestAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var accounts;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return ethereum.request({\n              method: 'eth_requestAccounts'\n            });\n\n          case 2:\n            accounts = _context2.sent;\n            return _context2.abrupt(\"return\", accounts);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _requestAccounts.apply(this, arguments);\n}\n\nfunction personalSign(_x, _x2) {\n  return _personalSign.apply(this, arguments);\n} // get nonce from /api/v1/users/ by account\n\n\nfunction _personalSign() {\n  _personalSign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account, message) {\n    var signature;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return ethereum.request({\n              method: 'personal_sign',\n              params: [message, account]\n            });\n\n          case 2:\n            signature = _context3.sent;\n            return _context3.abrupt(\"return\", signature);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _personalSign.apply(this, arguments);\n}\n\nfunction getUuidByAccount(_x3) {\n  return _getUuidByAccount.apply(this, arguments);\n}\n\nfunction _getUuidByAccount() {\n  _getUuidByAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account) {\n    var response, nonceJson, uuid;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetch(\"/api/v1/users/\" + account);\n\n          case 2:\n            response = _context4.sent;\n            _context4.next = 5;\n            return response.json();\n\n          case 5:\n            nonceJson = _context4.sent;\n\n            if (nonceJson) {\n              _context4.next = 8;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", null);\n\n          case 8:\n            uuid = nonceJson[0].eth_nonce;\n            return _context4.abrupt(\"return\", uuid);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getUuidByAccount.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/jsagudelo/codigo/blockchain/ethereum-on-rails/app/javascript/packs/sessions_new.js"],"names":["buttonEthConnect","document","querySelector","formInputEthMessage","formInputEthAddress","formInputEthSignature","hidden","formNewSession","window","ethereum","addEventListener","disabled","requestAccounts","accounts","etherbase","getUuidByAccount","nonce","customTitle","requestTime","Date","getTime","message","personalSign","signature","value","submit","innerHTML","request","method","account","params","fetch","response","json","nonceJson","uuid","eth_nonce"],"mappings":"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","sourcesContent":["// the button to connect to an ethereum wallet\nconst buttonEthConnect = document.querySelector('button.eth_connect');\n\n// the read-only eth fields, we process them automatically\nconst formInputEthMessage = document.querySelector('input.eth_message');\nconst formInputEthAddress = document.querySelector('input.eth_address');\nconst formInputEthSignature = document.querySelector('input.eth_signature');\nformInputEthMessage.hidden = true;\nformInputEthAddress.hidden = true;\nformInputEthSignature.hidden = true;\n\n// get the new session form for submission later\nconst formNewSession = document.querySelector('form.new_session');\n\n// only proceed with ethereum context available\nif (typeof window.ethereum !== 'undefined') {\n  buttonEthConnect.addEventListener('click', async () => {\n    buttonEthConnect.disabled = true;\n\n    // request accounts from ethereum provider\n    const accounts = await requestAccounts();\n    const etherbase = accounts[0];\n\n    // sign a message with current time and nonce from database\n    const nonce = await getUuidByAccount(etherbase);\n    if (nonce) {\n      const customTitle = \"Ethereum on Rails\";\n      const requestTime = new Date().getTime();\n      const message = customTitle + \",\" + requestTime + \",\" + nonce;\n      const signature = await personalSign(etherbase, message);\n\n      // populate and submit form\n      formInputEthMessage.value = message;\n      formInputEthAddress.value = etherbase;\n      formInputEthSignature.value = signature;\n      formNewSession.submit();\n    } else {\n\n      // should have some error handling here\n      formInputEthMessage.value = \"Please sign up first!\";\n    }\n  });\n} else {\n  // disable form submission in case there is no ethereum wallet available\n  buttonEthConnect.innerHTML = \"No Ethereum Context Available\";\n  buttonEthConnect.disabled = true;\n}\n\n// request ethereum wallet access and approved accounts[]\nasync function requestAccounts() {\n  const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n  return accounts;\n}\n\n// request ethereum signature for message from account\nasync function personalSign(account, message) {\n  const signature = await ethereum.request({ method: 'personal_sign', params: [ message, account ] });\n  return signature;\n}\n\n// get nonce from /api/v1/users/ by account\nasync function getUuidByAccount(account) {\n  const response = await fetch(\"/api/v1/users/\" + account);\n  const nonceJson = await response.json();\n  if (!nonceJson) return null;\n  const uuid = nonceJson[0].eth_nonce;\n  return uuid;\n}\n"]},"metadata":{},"sourceType":"module"}